const ROOT_PRODUCTS=document.getElementById("products"),ROOT_HEADER=document.getElementById("header"),ROOT_SHOPPING=document.getElementById("shopping"),ROOT_SPINNER=document.getElementById("spinner"),ROOT_ERROR=document.getElementById("error");class LocalStorageUtil{constructor(){this.keyName="products"}getProducts(){const e=localStorage.getItem(this.keyName);return null!==e?JSON.parse(e):[]}putProducts(e){let n=this.getProducts(),t=!1;const s=n.indexOf(e);return-1===s?(n.push(e),t=!0):n.splice(s,1),localStorage.setItem(this.keyName,JSON.stringify(n)),{pushProducts:t,products:n}}}const localStorageUtil=new LocalStorageUtil;class Header{handlerOpenShoppingPage(){shopping.render()}render(e){const n=`\n          <div class = "header-container">  \n                <div class = "header-counter" onclick="header.handlerOpenShoppingPage();">üî• ${e}</div>\n          </div>\n        `;ROOT_HEADER.innerHTML=n}}const header=new Header;class Products{constructor(){this.classNameActive="product-element__btn_active",this.labelAdd="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",this.labelRemove="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"}handleSetLocationStorage(e,n){const t=localStorageUtil.putProducts(n);t.pushProducts?(e.classList.add(this.classNameActive),e.innerHTML=this.labelRemove):(e.classList.remove(this.classNameActive),e.innerHTML=this.labelAdd),header.render(t.products.length)}render(){const e=localStorageUtil.getProducts();let n="";CATALOG.forEach(({id:t,name:s,price:r,img:c})=>{let o="",l="";-1===e.indexOf(t)?l=this.labelAdd:(l=this.labelRemove,o=" "+this.classNameActive),n+=`\n            <li class = "product-element">\n                <span class = "product-element__name">${s}</span>\n                <img  class = "product-element__img" src = "${c}"/>\n                <span class = "product-element__price">‚ö°Ô∏è ${r.toLocaleString()} USD</span>\n                <button class = "product-element__btn${o}" onclick = "products.handleSetLocationStorage(this,'${t}');">${l}\n                </button>\n            </li>\n            `});const t=`\n            <ul class = "product-container">\n                ${n} \n            </ul>\n        `;ROOT_PRODUCTS.innerHTML=t}}const products=new Products;class Shopping{hundleClear(){ROOT_SHOPPING.innerHTML=""}render(){const e=localStorageUtil.getProducts();let n="",t=0;CATALOG.forEach(({id:s,name:r,price:c})=>{-1!==e.indexOf(s)&&(n+=`\n                    <tr class = "shopping-element">\n                        <td class = "shopping-element__name">‚ö°Ô∏è ${r}</td>\n                        <td class = "shopping-element__price">${c.toLocaleString()} USD</td>\n                    </tr>\n                `,t+=c)});const s=`\n            <div class = "shopping-container">\n                <table>\n                    <div class = "shopping__close" onclick = "shopping.hundleClear();"> <div>\n                    ${n}\n                     <tr class = "shopping-element">\n                        <td class = "shopping-element__name">üí• –°—É–º–º–∞</td>\n                        <td class = "shopping-element__price">${t.toLocaleString()} USD</td>\n                    </tr>\n                </table>\n            </div>\n        `;ROOT_SHOPPING.innerHTML=s}}const shopping=new Shopping;class Spinner{handleClear(){ROOT_SPINNER.innerHTML=""}render(){ROOT_SPINNER.innerHTML='\n            <div class = "spinner-container">\n                <img class = "spinner__img" src = "../../../build/img/spinner.svg">\n            </div>\n        '}}const spinner=new Spinner;spinner.render();class Error{render(){ROOT_ERROR.innerHTML='\n        <div class = "error-container">\n            <div class = "error-message"> \n                <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞</h3>\n                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ</p>\n            </div>\n        </div>\n            '}}const error=new Error;function render(){const e=localStorageUtil.getProducts();header.render(e.length),products.render()}spinner.render();let CATALOG=[];fetch("src/Server/catalog.json").then(e=>e.json()).then(e=>{CATALOG=e,spinner.handleClear(),render()}).catch(e=>{error.render(),spinner.handleClear()});